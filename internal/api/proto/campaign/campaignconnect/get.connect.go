// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/campaign/get.proto

package campaignconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	campaign "github.com/loveo2d/CouponIssuanceSystem/internal/api/proto/campaign"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GetCampaignServiceName is the fully-qualified name of the GetCampaignService service.
	GetCampaignServiceName = "rpc_campaign.GetCampaignService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GetCampaignServiceGetCampaignProcedure is the fully-qualified name of the GetCampaignService's
	// GetCampaign RPC.
	GetCampaignServiceGetCampaignProcedure = "/rpc_campaign.GetCampaignService/GetCampaign"
)

// GetCampaignServiceClient is a client for the rpc_campaign.GetCampaignService service.
type GetCampaignServiceClient interface {
	GetCampaign(context.Context, *connect.Request[campaign.GetCampaignRequest]) (*connect.Response[campaign.GetCampaignResponse], error)
}

// NewGetCampaignServiceClient constructs a client for the rpc_campaign.GetCampaignService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGetCampaignServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GetCampaignServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	getCampaignServiceMethods := campaign.File_proto_campaign_get_proto.Services().ByName("GetCampaignService").Methods()
	return &getCampaignServiceClient{
		getCampaign: connect.NewClient[campaign.GetCampaignRequest, campaign.GetCampaignResponse](
			httpClient,
			baseURL+GetCampaignServiceGetCampaignProcedure,
			connect.WithSchema(getCampaignServiceMethods.ByName("GetCampaign")),
			connect.WithClientOptions(opts...),
		),
	}
}

// getCampaignServiceClient implements GetCampaignServiceClient.
type getCampaignServiceClient struct {
	getCampaign *connect.Client[campaign.GetCampaignRequest, campaign.GetCampaignResponse]
}

// GetCampaign calls rpc_campaign.GetCampaignService.GetCampaign.
func (c *getCampaignServiceClient) GetCampaign(ctx context.Context, req *connect.Request[campaign.GetCampaignRequest]) (*connect.Response[campaign.GetCampaignResponse], error) {
	return c.getCampaign.CallUnary(ctx, req)
}

// GetCampaignServiceHandler is an implementation of the rpc_campaign.GetCampaignService service.
type GetCampaignServiceHandler interface {
	GetCampaign(context.Context, *connect.Request[campaign.GetCampaignRequest]) (*connect.Response[campaign.GetCampaignResponse], error)
}

// NewGetCampaignServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGetCampaignServiceHandler(svc GetCampaignServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	getCampaignServiceMethods := campaign.File_proto_campaign_get_proto.Services().ByName("GetCampaignService").Methods()
	getCampaignServiceGetCampaignHandler := connect.NewUnaryHandler(
		GetCampaignServiceGetCampaignProcedure,
		svc.GetCampaign,
		connect.WithSchema(getCampaignServiceMethods.ByName("GetCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc_campaign.GetCampaignService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GetCampaignServiceGetCampaignProcedure:
			getCampaignServiceGetCampaignHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGetCampaignServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGetCampaignServiceHandler struct{}

func (UnimplementedGetCampaignServiceHandler) GetCampaign(context.Context, *connect.Request[campaign.GetCampaignRequest]) (*connect.Response[campaign.GetCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc_campaign.GetCampaignService.GetCampaign is not implemented"))
}
