// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/campaign/create.proto

package campaignconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	campaign "github.com/loveo2d/CouponIssuanceSystem/internal/api/proto/campaign"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CreateCampaignServiceName is the fully-qualified name of the CreateCampaignService service.
	CreateCampaignServiceName = "rpc_campaign.CreateCampaignService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CreateCampaignServiceCreateCampaignProcedure is the fully-qualified name of the
	// CreateCampaignService's CreateCampaign RPC.
	CreateCampaignServiceCreateCampaignProcedure = "/rpc_campaign.CreateCampaignService/CreateCampaign"
)

// CreateCampaignServiceClient is a client for the rpc_campaign.CreateCampaignService service.
type CreateCampaignServiceClient interface {
	CreateCampaign(context.Context, *connect.Request[campaign.CreateCampaignRequest]) (*connect.Response[campaign.CreateCampaignResponse], error)
}

// NewCreateCampaignServiceClient constructs a client for the rpc_campaign.CreateCampaignService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCreateCampaignServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CreateCampaignServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	createCampaignServiceMethods := campaign.File_proto_campaign_create_proto.Services().ByName("CreateCampaignService").Methods()
	return &createCampaignServiceClient{
		createCampaign: connect.NewClient[campaign.CreateCampaignRequest, campaign.CreateCampaignResponse](
			httpClient,
			baseURL+CreateCampaignServiceCreateCampaignProcedure,
			connect.WithSchema(createCampaignServiceMethods.ByName("CreateCampaign")),
			connect.WithClientOptions(opts...),
		),
	}
}

// createCampaignServiceClient implements CreateCampaignServiceClient.
type createCampaignServiceClient struct {
	createCampaign *connect.Client[campaign.CreateCampaignRequest, campaign.CreateCampaignResponse]
}

// CreateCampaign calls rpc_campaign.CreateCampaignService.CreateCampaign.
func (c *createCampaignServiceClient) CreateCampaign(ctx context.Context, req *connect.Request[campaign.CreateCampaignRequest]) (*connect.Response[campaign.CreateCampaignResponse], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// CreateCampaignServiceHandler is an implementation of the rpc_campaign.CreateCampaignService
// service.
type CreateCampaignServiceHandler interface {
	CreateCampaign(context.Context, *connect.Request[campaign.CreateCampaignRequest]) (*connect.Response[campaign.CreateCampaignResponse], error)
}

// NewCreateCampaignServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCreateCampaignServiceHandler(svc CreateCampaignServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	createCampaignServiceMethods := campaign.File_proto_campaign_create_proto.Services().ByName("CreateCampaignService").Methods()
	createCampaignServiceCreateCampaignHandler := connect.NewUnaryHandler(
		CreateCampaignServiceCreateCampaignProcedure,
		svc.CreateCampaign,
		connect.WithSchema(createCampaignServiceMethods.ByName("CreateCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc_campaign.CreateCampaignService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CreateCampaignServiceCreateCampaignProcedure:
			createCampaignServiceCreateCampaignHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCreateCampaignServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCreateCampaignServiceHandler struct{}

func (UnimplementedCreateCampaignServiceHandler) CreateCampaign(context.Context, *connect.Request[campaign.CreateCampaignRequest]) (*connect.Response[campaign.CreateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc_campaign.CreateCampaignService.CreateCampaign is not implemented"))
}
